library(scater)
library(ggplot2)
## TODO : faire fct qui UMAP et qui PCA
## param Hnorm = lig@H.norm
make_PCA  <- function(Hnorm){
pca <- calculatePCA(Hnorm,
ncomponents = 2
)
rownames(pca) <- rownames(Hnorm)
df <- data.frame(PCA = pca)
df$Modality <- ifelse(startsWith(rownames(df), "i"), "protein", "rna")
gg <- ggplot(df) +
aes(x = PCA.1,
y = PCA.2,
colour = Modality) +
xlab("PCA 1") +
ylab("PCA 2")
}
make_UMAP <- function(Hnorm, lig){
umap <- calculateUMAP(Hnorm,
ncomponents = 2,
scale = TRUE,
n_neighbors = 10,
transpose = TRUE)
rownames(umap) <- rownames(Hnorm,lig)
df <- data.frame(UMAP = umap)
##df <- cbind(df, colData(mae)[rownames(df), ])
df$Modality <- ifelse(startsWith(rownames(df), "i"), "protein", "rna")
gg <- ggplot(df) +
aes(x = UMAP.1,
y = UMAP.2,
colour = Modality) +
geom_point(size = 0.5, alpha = 0.3) +
theme_minimal() +
theme(legend.position = "bottom") +
xlab("UMAP 1") +
ylab("UMAP 2")
gg + scale_colour_manual(values = c("#7332a8", "orange2"),
na.value = "grey")
}
##Plot
## TODO : mettre path aux images sauvegardÃ©es
##' This function plots two matrices value by value column by column
##'
##' assert : dim(V) = dim(W)
##'
##' @param V `numeric(n * m)` first matrix to plot : RED.
##' @param W `numeric(n * m)` first matrix to plot : GREEN
##'
##' @param n `numeric(1)` number of rows of V and W
##' @param m `numeric(1)` mumber of columns of V and W
##'
##' @param name `string` name of the plot
##' @param nameV `string` name of the matrix V
##' @param nameW `string` name of the matrix W
##'
plot_two_matrices_column <- function(V, W, n, m, nameV, nameW, name) {
dim(V) <- c(1,n * m)
dim(W) <- c(1,n * m)
X <- rbind(V, W)
png(name)
barplot(X,
main = name,
xlab = "x",
col = c("red","green"),
beside=TRUE
)
legend("topleft",
c(nameV, nameW),
fill = c("red","green")
)
dev.off()
}
plot_one_matrices_column <- function(V, n,m,name) {
dim(V) <- c(1,n * m)
png(name)
barplot(V,
main = name,
xlab = "x",
col = c("red"),
beside=TRUE
)
legend("topleft",
c(name),
fill = c("red")
)
dev.off()
}
make_csv <- function(A,B,string,name) {
df <- data.frame(RNA = A,
PROT = B)
name = str(string) + str(name)
write.csv(df,name, row.names = FALSE)
}
make_csv_W <- function(A, script) {
df <- data.frame(W = A)
write.csv(df,script + "W.csv", row.names = FALSE)
}
##Create liger object
## TODO : une meilleure descrption
make_liger_object <- function(X, n_rna, n_prot, g, z_rna, z_prot, k){
rna <- X[[1]]
protein <- X[[2]]
rnaGenes <- paste0("gene", 1:(z_rna + g))
rownames(rna) <- rnaGenes
proteinGenes <- paste0("gene", (z_rna + 1):(z_rna + z_prot + g))
rownames(protein) <- proteinGenes
colnames(rna) <- paste0("cell", 1:n_rna)
colnames(protein) <- paste0("cell", (n_rna + 1):(n_rna + n_prot))
lig <- createLiger(list(rna = rna,
protein = protein),
take.gene.union = FALSE,
remove.missing = TRUE)
lig@var.genes <- intersect(rownames(protein), rownames(rna))
length(lig@var.genes)
lig@var.unshared.features <- list(rna = rownames(rna)[!rownames(rna) %in% lig@var.genes],
protein = rownames(protein)[!rownames(protein) %in% lig@var.genes])
lapply(lig@var.unshared.features, length)
lig <- rliger::normalize(lig)
print(lig@norm.data)
print(lig@scale.data)
lig <- scaleNotCenter(object = lig,
remove.missing = TRUE)
print(lig@norm.data)
print(lig@scale.data)
return(lig)
}
## TODO : trouver un moyen de conserver les differentes facto (utiliser seed)
save_factorisation <-function(V, U, W, H, seed){
V_1 <-V
U_1 <-U
W_1 <-W
H_1 <-H
}
library(MultiAssayExperiment)
library(rliger)
library(scater)
args = commandArgs(trailingOnly=TRUE)
source("Make_plot.R")
source("Make_liger.R")
source("Make_reduction.R")
script <- "S06"
#n_i : number of cells
n_rna <- 40
n_prot <- 40
#g : number of shared genes
g <- 25
#z_i : number of unshared genes
z_rna <- 5
z_prot <- 5
#k : , random : rand.seed
k <- 3
random <- as.integer(args[1])
make_row_uniform <- function(a, ncol){
print(runif(ncol, min=(a - 1), max=a))
return(runif(ncol, min=(a - 1), max=a))
}
make_X_list <- function(g, z_rna, z_prot, n_rna, n_prot) {
#dim: (g+z_i) x n_i)
X = list()
X[[1]] <- make_row_uniform(1, n_rna)
X[[2]] <- make_row_uniform(1, n_prot)
for (i in 2:(z_rna + g)) {
X[[1]] <- rbind(X[[1]], make_row_uniform(i, n_rna))
}
for (i in 2:(z_prot + g)) {
X[[2]] <- rbind(X[[2]], make_row_uniform(i, n_prot))
}
return(X)
}
X <- make_X_list(g, z_rna, z_prot, n_rna, n_prot)
make_csv(X[[1]],X[[2]],script,"X.csv")
print(X)
#Create lig object + normalise +  scaleNotCenter
lig <- make_liger_object(X, n_rna, n_prot, g, z_rna, z_prot, k)
lig <- optimizeALS(lig,
k = k, ## Number of latent factors
lambda = 5,
thresh = 1e-06,
max.iters = 30,
use.unshared = TRUE,
rand.seed=random)
lig <- quantile_norm(lig, ref_dataset = "rna")
WVU <- cbind()
make_csv(lig@scale.data[[1]],lig@scale.data[[2]],str(script), "shared.csv")
make_csv(lig@scale.unshared.data[[1]],lig@scale.unshared.data[[2]],str(script), "unshared.csv")
make_csv(lig@H[[1]],lig@H[[2]],str(script),"data.csv")
make_csv(lig@V[[1]],lig@V[[2]],str(script), "V.csv")
make_csv(lig@U[[1]],lig@U[[2]],str(script), "U.csv")
make_csv_W(lig@W, script)
print(lig@H)
print(lig@H.norm)
?liger
